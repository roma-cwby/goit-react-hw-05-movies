{"version":3,"file":"static/js/864.e83f92d4.chunk.js","mappings":"kRAEaA,E,OAAeC,GAAAA,IAAH,mR,SC8DzB,EAxDe,WACb,OAAuCC,EAAAA,EAAAA,MAAvC,eAAOC,EAAP,KAAoBC,EAApB,KACA,GAAoCC,EAAAA,EAAAA,UAAS,IAA7C,eAAOC,EAAP,KAAmBC,EAAnB,KACIC,EAAQL,EAAYM,IAAI,KAAON,EAAYM,IAAI,KAAO,GAEpDC,GAAWC,EAAAA,EAAAA,MAiBjB,OAfAC,EAAAA,EAAAA,YAAU,WAAM,wCACd,wFACMJ,EADN,2CAGyBK,EAAAA,EAAAA,IAAeL,GAHxC,UAGYM,EAHZ,OAIMP,EAAcO,GAJpB,OAKWA,QALX,IAKWA,GAAAA,EAAMC,OALjB,sBAK+B,IAAIC,MALnC,yDAOMC,MAAM,SAPZ,2DADc,uBAAC,WAAD,wBAYdC,EACD,GAAE,CAACV,KAGF,UAACR,EAAD,YACE,4BACE,kBACEmB,KAAK,OACLC,SAAU,SAAAC,GAAC,OAAIjB,EAAgB,CAAEkB,EAAGD,EAAEE,OAAOC,OAAlC,EACXA,MAAOhB,GAASA,KAElB,mBAAQW,KAAK,SAASM,QAAS,kBAAOjB,EAAQL,EAAYM,IAAI,IAA/B,EAA/B,wBAKF,SAAC,EAAAiB,SAAD,CAAUC,UAAU,wCAApB,SACGrB,EAAWS,OAAS,IACnB,SAAC,IAAD,UACGT,EAAWsB,KAAI,SAAAC,GAAK,OACnB,yBACE,UAAC,KAAD,CAAMC,GAAE,kBAAaD,EAAME,IAAMC,MAAO,CAAEC,KAAMvB,GAAhD,WACE,gBACEwB,IA5CC,mCA4CmBL,EAAMM,YAC1BC,IAAKP,EAAMQ,SAEb,wBAAKR,EAAMQ,YANNR,EAAME,GADI,UAgBhC,C","sources":["components/Movies/Movies.styled.js","components/Movies/Movies.js"],"sourcesContent":["import styled from 'styled-components';\n\nexport const MoviesSearch = styled.div`\n  padding: 0 20px;\n\n  div {\n    margin-bottom: 20px;\n\n    input {\n      height: 30px;\n      border-radius: 5px;\n    }\n\n    button {\n      border-radius: 5px;\n      height: 30px;\n      padding: 0 10px;\n      cursor: pointer;\n    }\n  }\n`;\n","import { useEffect, useState, Suspense } from 'react';\nimport { useSearchParams, Link, useLocation } from 'react-router-dom';\nimport { getFilmsByName } from 'api';\nimport { HomeList } from 'components/Home/Home.Styled';\nimport { MoviesSearch } from './Movies.styled';\n\nconst BASE_IMG_URL = 'https://image.tmdb.org/t/p/w500/';\n\nconst Movies = () => {\n  const [seachParams, setSearchParams] = useSearchParams();\n  const [searchList, setSearchList] = useState([]);\n  let query = seachParams.get('q') ? seachParams.get('q') : '';\n\n  const location = useLocation();\n\n  useEffect(() => {\n    async function getData() {\n      if (query)\n        try {\n          const data = await getFilmsByName(query);\n          setSearchList(data);\n          if (!data?.length) throw new Error();\n        } catch (e) {\n          alert(`Error`);\n        }\n    }\n\n    getData();\n  }, [query]);\n\n  return (\n    <MoviesSearch>\n      <div>\n        <input\n          type=\"text\"\n          onChange={e => setSearchParams({ q: e.target.value })}\n          value={query && query}\n        ></input>\n        <button type=\"submit\" onClick={() => (query = seachParams.get('q'))}>\n          Search\n        </button>\n      </div>\n\n      <Suspense fallback={<div>Loading...</div>}>\n        {searchList.length > 0 && (\n          <HomeList>\n            {searchList.map(movie => (\n              <li key={movie.id}>\n                <Link to={`/movies/${movie.id}`} state={{ from: location }}>\n                  <img\n                    src={BASE_IMG_URL + movie.poster_path}\n                    alt={movie.title}\n                  />\n                  <h2>{movie.title}</h2>\n                </Link>\n              </li>\n            ))}\n          </HomeList>\n        )}\n      </Suspense>\n    </MoviesSearch>\n  );\n};\n\nexport default Movies;\n"],"names":["MoviesSearch","styled","useSearchParams","seachParams","setSearchParams","useState","searchList","setSearchList","query","get","location","useLocation","useEffect","getFilmsByName","data","length","Error","alert","getData","type","onChange","e","q","target","value","onClick","Suspense","fallback","map","movie","to","id","state","from","src","poster_path","alt","title"],"sourceRoot":""}